 继承：
/**
 *  继承 : 从现有类创建(扩展)子类, 现有类就称为父类(顺序), 基类(子类以它为基础进行扩展), 超类(在子类中使用super表示父类成员).
 *  子类继承父类的所有成员(构造器除外)
 *  
 *  子类可以继承父类的私有成员, 但是在子类中不能直接访问, 必须通过从父类继承的公共的get/set方法间接访问
 *  
 *  为什么继承 : 代码复用, 动态变化.
 *  为多态提供前提
 *  
 *  继承体现的是子类对父类的增强
 *  
 *  Java只支持单继承(多层继承) 不支持多重继承(一个类拥有多个直接父类)
 *  
 * 方法覆盖(Override) 子类的方法覆盖父类的方法, 导致父类的方法不可见.  覆盖的原因就是子类对父类的方法不满.
 * 条件 : 
 * 	1) 方法签名完全一致(返回值类型, 方法名, 参数列表(参数个数, 顺序, 类型))
 * 	2) 子类方法的访问控制修饰符大于等于父类的.( 体现子类不能缩小父类)
 * 
 *方法重载：
 * 条件：
 * 	1）重载方法的返回类型不是必须一致
 * 	2）重载方法的参数列表（参数名称，参数顺序，参数个数）必须不一致
 *	3）方法重载要求方法名称必须相同

 * 访问控制修饰符 
 * public 			任意
 * protected		同类		同包不同类			不同包子类
 * default			同类		同包不同类			
 * private			同类
 *
 *   子类中所有的构造器默认都会访问父类中空参数的构造器
 *   子类构造器中的super(...)调用必须位于第一行, 效果是优先执行父类构造器, 子类构造器后执行(体现先父后子)
 *   在子类构造器中的第一行, 要么是super(...) 要么是this(...), 二者不能共存
 *   super(...)是对父类构造器直接调用
 *   this(...)是对父类构造器的间接调用.
 *   
 *  所有类的构造器的执行, 都必须要有先对父类构造器的调用. 为什么???? 先父后子

 */
 
 多态：
 /**
 * 多态 : 子类对象的多种父类形态.
 * 本态 : 子类对象的本类形态
 * 
 * 多态引用 : 子类对象的地址写入父类类型的引用变量.
 * 本态引用 : 子类对象的地址写入本类类型的引用变量.
 * 
 * 子类对象的多种父类形态, 父类引用指向多种不同类型的子类对象.
 
 * 属性不具备多态性，只看引用变量所属的类
 * 多态 : 多态数组, 优点就是可以保存同一父类的不同子类的对象
 
 * 多态引用调用重写方法, 就是虚方法调用.
 * 1) 编译时关注 父类类型
 * 2) 运行时关注 子类对象实体
 
 * 多态副作用 , 子类的特有成员不能访问了.
 * 要用 instanceof 先判断类型
 * 判断p引用指向的对象实体是否是右侧Chinese类型的一个对象，判断的是指向的对象实体（=右边的），而不是左边的对象类型
 * 如下程序：
 	public static void test(Person p) { // 参数类型声明成父类类型, 多态参数方法，会将传入的对象转换为Person类型的引用
		p.sayHello();
		
		//p.spring(); // 多态副作用
		// 类型判断时先从子类开始到父类
		if (p instanceof Chinese) { // 判断p引用指向的对象实体是否是右侧Chinese类型的一个对象，判断的是指向的对象实体（=右边的），而不是左边的对象类型
			Chinese ch = (Chinese)p; // 造型有风险, 必须先判断
			ch.spring();
		} else if (p instanceof American) {
			((American)p).thanks();
		} else {
			System.out.println("普通人");
		}
	}
 * main方法中调用test方法： test(Chinese);
							test(Person);
							test(American)；
 
 */
 
 @Override
注解 : 一种特殊的注释, 可以被编译器和VM识别的注释, @Override 作用是修饰这个方法, 告诉编译器, 请帮助我作方法覆盖条件的检查.

 Object类的主要方法：
 ** "==" 与 equals比较
 * "==" ： 比较的是两个引用变量中的地址值, 对象的比较不可以使用==
 * equals : 应该使用equals方法调用. 这个方法用于比较对象的内容,但是必须重写equal方法，因为Object中继承来的方法依然比较的是地址，和"=="效果相同；
 
 	如下： /** 这是父类中的equals方法. 这个方法太烂, 不能完成比较对象的内容的任务, 所以必须重写
	public boolean equals(Object obj) {
        return (this == obj);
    }*/
 
 * 重写可以自动生成，Alt+Shift+S快捷键生成
 
 /**                     ==和equals的区别
	* == 既可以比较基本类型也可以比较引用类型。对于基本类型就是比较值，对于引用类型就是比较内存地址

	* equals的话，它是属于java.lang.Object类里面的方法，如果该方法没有被重写过默认也是==;
	
	* 我们可以看到String等类的equals方法是被重写过的，而且String类在日常开发中用的比较多，久而久之，形成了equals是比较值的错误观点。

	* 具体要看自定义类里有没有重写Object的equals方法来判断。

	* 通常情况下，重写equals方法，会比较类中的相应属性是否都相等。
 */
 
 ** hashCode
 * 	/** 这是Object类中的hashCode方法, 很烂, 底层是使用物理地址进行哈希算法处理的结果
	public native int hashCode();
	*/
 
 /**
 * 如果两个对象的equals为true, 说明两个对象内容相等, 内容相等,根据内容计算的特征码必须一样
 * 如果两个对象的equals为false, 说明两个对象内容不等, 内容不等, 必须散列(必须码值不一样)
 * 
 * 如果两个对象的哈希码相同, 两个对象必须equals为true
 * 如果两个对象的哈希码不同, 两个对象必须equals为false
 */
 
 
 对象类型转换 (Casting )

 ** 基本数据类型的Casting：
 
	* 自动类型转换：小的数据类型可以自动转换成大的数据类型，byte,short,char之间不会相互转换，他们三者在计算时首先转换为int类型。
	* 如long g=20;           double d=12.0f
	* 数据范围从小到大
	  byte < short < int < long < float < double 
	* 混合数据类型运算时, 结果总是类型范围最大的那种类型
	* 任意非long整数作运算, 结果总是int型
	
	* 强制类型转换：可以把大的数据类型强制转换(casting)成小的数据类型
	* 如 float f=(float)12.0;   int a=(int)1200L
	* 自动类型转换的逆过程，将容量大的数据类型转换为容量小的数据类型。使用时要加上强制转换符（()），但可能造成精度降低或溢出,格外要注意。
	* 通常，字符串不能直接转换为基本类型，但通过基本类型对应的包装类则可以实现把字符串转换成基本类型。
	* 如： String a = “43”; int i = Integer.parseInt(a);
	* boolean类型不可以转换为其它的数据类型。  
	* 范围小的量值可以直接给范围大的变量赋值, 范围大的量值不可以直接给范围小的变量赋值, 必须要通过强制类型转换才可以
	* 
    
	
 ** 对Java对象的强制类型转换称为造型
 
	* 从子类到父类的类型可以自动进行
	* 从父类到子类的类型转换必须通过造型(强制类型转换)实现
	* 无继承关系的引用类型间的转换是非法的
	* 在造型前可以使用instanceof操作符测试一个对象的类型

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
