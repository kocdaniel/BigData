GET _search
{
  "query": {
    "match_all": {}
  }
}

GET _cat/nodes?v

GET _cat/indices?v

GET _cat/shards/.kibana_1

# put index/type/id
PUT movie_index/movie_type/1
{
  "id":"1",
  "name":"operation red sea",
  "doubanScore":"8.5",
  "actorList":[  
{"id":"1","name":"zhang yi"},
{"id":"2","name":"hai qing"},
{"id":"3","name":"zhang han yu"}
]
}

GET movie_index/_search
==================================================================================
# 新增文档
# 分词规则：用name字段举例
# operation  -->  [id 1 , offset 0,count 1 ], [id 2 , offset 0,count 1 ]
# red -->  [id 2]
# sea 
# meigong 
# river 
# incident

PUT movie_index0715/movie_type/1
{
  "id":"1",
  "name":"operation red sea",
  "doubanScore":8.5,
  "actorList":[  
  {"id":"1","name":"zhang yi"},
  {"id":"2","name":"hai qing"},
  {"id":"3","name":"zhang han yu"}
  ]
}


PUT movie_index0715/movie_type/2
{
  "id":2,
  "name":"operation meigong river",
  "doubanScore":8.0,
  "actorList":[  
{"id":3,"name":"zhang han yu"}
]
}

PUT movie_index0715/movie_type/3
{
  "id":3,
  "name":"incident red sea",
  "doubanScore":5.0,
  "actorList":[  
{"id":4,"name":"zhang chen1"}
]
}

# 直接用id查找
GET movie_index0715/movie_type/3

# 修改-整体替换：和新增一样，必须包含全体字段
PUT movie_index0715/movie_type/3
{
  "id":3,
  "name":"incident red sea",
  "doubanScore":6.0,
  "actorList":[  
{"id":4,"name":"zhang chen1"}
]
}

# 修改某个字段:post
POST movie_index0715/movie_type/3/_update
{
  "doc": {
    "doubanScore":5.0
  }
}

# 插入
# 指定id 的put    有就覆盖 没有就插入 
# 不指定 post   非幂等   随机产生id  直接插入 不会覆盖 


# 修改 
# put 全部字段覆盖 
# post 可以只改动一个

# PUT POST区别  一个是幂等 一个是非幂等 

# 搜索type全部数据
GET movie_index0715/movie_type/_search

# 按条件查询(全部)
GET movie_index0715/movie_type/_search
{
  "query": {
    "match_all": {}
  }
}

# 按分词查询 
GET movie_index0715/movie_type/_search
{
  "query": {
    "match": {
      "name": "operation red sea"
    }
  }
}

GET movie_index0715/movie_type/_search
{
  "query": {
    "match": {
      "actorList.name": "zhang han yu"
    }
  }
}

# match phrase:按短语查询，不再利用分词技术，直接用短语在原始数据中匹配
GET movie_index0715/_search
{
  "query": {
    "match_phrase": {
      "actorList.name": "zhang han yu"
    }
  }
}

# fuzzy查询:校正匹配分词，当一个单词都无法准确匹配，es通过一种算法对非常接近的单词也给与一定的评分，能够查询出来，但是消耗更多的性能。
GET movie_index0715/_search
{
  "query": {
    "fuzzy": {
      "name": "rad"
    }
  }
}

# 过滤--查询后过滤:这种方式的过滤是不推荐使用的，因为会扫描两遍
# 注意：过滤的时候是不分词的，为了防止查询出来的字段需要过滤，其实查询的结果有一个不分词的备份数据，使用".keyword"声明
GET movie_index0715/_search
{
  "query": {
    "match": {
      "name": "operation red sea"
    }
  },
  "post_filter": {
    "term": {
      "actorList.name.keyword": "hai qing"
    }
  }
}

# 过滤--查询前过滤（推荐使用）
GET movie_index0715/_search
{
  "query": {
    "bool": {
      "filter": {
        "term": {
          "actorList.name.keyword": "hai qing"
        }
      },
      "must": [
        {
          "match": {
            "name": "operation red sea"
          }
        }
      ]
    }
  }
}

# 过滤--按范围过滤
GET movie_index0715/_search
{
  "query": {
    "bool": {
      "filter": {
        "range": {
          "doubanScore": {
            "lte": 5
          }
        }
      },
      "must": [
        {
          "match": {
            "name": "operation red sea"
          }
        }
      ]
    }
  }
}

# 排序
GET movie_index0715/_search
{
  "query": {
    "bool": {
      "filter": {
        "range": {
          "doubanScore": {
            "lte": 10
          }
        }
      },
      "must": [
        {
          "match": {
            "name": "operation red sea"
          }
        }
      ]
    }
  },
  "sort": [
    {
      "doubanScore": {
        "order": "asc"
      }
    }
  ]
}

# 分页查询:
# from后边是行号，size是每页几行
# 行号= （页码-1）* 页行数
GET movie_index0715/_search
{
  "query": {
    "bool": {
      "filter": {
        "range": {
          "doubanScore": {
            "lte": 10
          }
        }
      },
      "must": [
        {
          "match": {
            "name": "operation red sea"
          }
        }
      ]
    }
  },
  "sort": [
    {
      "doubanScore": {
        "order": "asc"
      }
    }
  ],
  "from": 0,
  "size": 2
}

# 指定查询的字段:_source
GET movie_index0715/_search
{
  "query": {
    "bool": {
      "filter": {
        "range": {
          "doubanScore": {
            "lte": 10
          }
        }
      },
      "must": [
        {
          "match": {
            "name": "operation red sea"
          }
        }
      ]
    }
  },
  "sort": [
    {
      "doubanScore": {
        "order": "asc"
      }
    }
  ],
  "from": 0,
  "size": 10,
  "_source": "actorList.name"
}

# 高亮
GET movie_index0715/_search
{
  "query": {
    "bool": {
      "filter": {
        "range": {
          "doubanScore": {
            "lte": 10
          }
        }
      },
      "must": [
        {
          "match": {
            "name": "operation red sea"
          }
        }
      ]
    }
  },
  "sort": [
    {
      "doubanScore": {
        "order": "asc"
      }
    }
  ],
  "from": 0,
  "size": 10,
  "highlight": {
    "fields": {"name": {}}
  }
}

# 聚合
GET movie_index0715/_search
{
  "query": {
    "bool": {
      "filter": {
        "range": {
          "doubanScore": {
            "lte": 10
          }
        }
      },
      "must": [
        {
          "match": {
            "name": "operation red sea"
          }
        }
      ]
    }
  },
  "sort": [
    {
      "doubanScore": {
        "order": "asc"
      }
    }
  ],
  "from": 0,
  "size": 10,
  "highlight": {
    "fields": {"name": {}}
  },
  "aggs": {
    "avg_score": {
      "avg": {
        "field": "doubanScore"
      }
    }
  }
}

# 每个演员参演了多少部电影
# text字段默认不能进行分组，需使用keyword
# terms相当于group by，且自动计算count不需指定
GET movie_index0715/_search
{
  "aggs": {
    "actor_movie_count": {
      "terms": {
        "field": "actorList.name.keyword",
        "size": 10
      }
    }
  }
}

# 每个演员参演电影的平均分是多少，并按评分排序
GET movie_index0715/_search
{
  "aggs": {
    "actor_movie_count": {
      "terms": {
        "field": "actorList.name.keyword",
        "size": 10,
        "order": {
          "avg_score": "desc"
        }
      },
      "aggs": {
        "avg_score": {
          "avg": {
            "field": "doubanScore"
          }
        }
      }
    }
  }
}

# 中文分词器
GET movie_index/_analyze
{  
  "text": "我是中国人",
  "analyzer": "ik_smart"
}

GET movie_index/_analyze
{  
  "text": "我是中国人",
  "analyzer": "ik_max_word"
}

# 插入数据
PUT /movie0715_chn/movie/1
{ "id":1,
  "name":"红海行动",
  "doubanScore":8.5,
  "actorList":[  
  {"id":1,"name":"张译"},
  {"id":2,"name":"海清"},
  {"id":3,"name":"张涵予"}
 ]
}

PUT /movie0715_chn/movie/2
{
  "id":2,
  "name":"湄公河行动",
  "doubanScore":8.0,
  "actorList":[  
{"id":3,"name":"张涵予"}
]
}

PUT /movie0715_chn/movie/3
{
  "id":3,
  "name":"红海事件",
  "doubanScore":5.0,
  "actorList":[  
{"id":4,"name":"张晨"}
]
}

GET movie0715_chn/_search
GET movie0715_chn/_mapping

# 默认使用的分词器是一个字一个词
# 所以需要在建表的时候自定义分词器
GET movie0715_chn/_search
{
  "query": {
    "match": {
      "name": "海行"
    }
  }
}

DELETE movie0715_chn

# 自定义分词器
PUT movie0715_chn
{
  "mappings": {
    "movie":{
      "properties": {
        "id":{
          "type": "long"
        },
        "name":{
          "type": "text"
          , "analyzer": "ik_smart"
        },
        "doubanScore":{
          "type": "double"
        },
        "actorList":{
          "properties": {
            "id":{
              "type":"long"
            },
            "name":{
              "type":"keyword"
            }
          }
        }
      }
    }
  }
}

# 这样查询“海行”就查不出来了
GET movie0715_chn/_search
{
  "query": {
    "match": {
      "name": "海行"
    }
  }
}



